	*** main ***
1..5
ok 1 - crypto checks that algo argument is correct
	*** test_aes128_codec ***
    1..20
    ok 1 - encrypt returns needed number of bytes
    ok 2 - encrypt does not write anything when too small buffer
    ok 3 - encrypt does not allow 0 sized buffer
    ok 4 - encrypt requires additional block when buffer size is multiple of block size
    ok 5 - AES 126 IV size is 16
    ok 6 - encrypt works when buffer is big enough
    ok 7 - encrypt returns the same on second call
    ok 8 - encrypted data is the same
    ok 9 - and it is not just copied from the plain text
    ok 10 - decrypt also checks length and returns needed number of bytes
    ok 11 - decrypt returns correct number of bytes
    ok 12 - and correctly decrypts data
    ok 13 - decrypt can't correctly decode anything with a wrong IV
    ok 14 - in case decrypt has totally failed, diag is set
    ok 15 - encrypt with different IV and the same number of written bytes returned
    ok 16 - the encrypted data looks different
    ok 17 - decrypt works with correct but another IV
    ok 18 - data is the same
    ok 19 - encrypt with one codec, but decrypt with another codec and the same key
    ok 20 - data is the same
ok 2 - subtests
	*** test_aes128_codec: done ***
	*** test_aes128_stress ***
    1..1
    ok 1 - try encrypt/decrypt on a variety of sizes, keys, and ivs
ok 3 - subtests
	*** test_aes128_stress: done ***
	*** test_each ***
    1..80
    ok 1 - none 0 ECB, create iv of size 0
    ok 2 - encode
    ok 3 - decode
    ok 4 - data is correct
    ok 5 - none 0 CBC, create iv of size 0
    ok 6 - encode
    ok 7 - decode
    ok 8 - data is correct
    ok 9 - none 0 CFB, create iv of size 0
    ok 10 - encode
    ok 11 - decode
    ok 12 - data is correct
    ok 13 - none 0 OFB, create iv of size 0
    ok 14 - encode
    ok 15 - decode
    ok 16 - data is correct
    ok 17 - AES128 16 ECB, create iv of size 0
    ok 18 - encode
    ok 19 - decode
    ok 20 - data is correct
    ok 21 - AES128 16 CBC, create iv of size 16
    ok 22 - encode
    ok 23 - decode
    ok 24 - data is correct
    ok 25 - AES128 16 CFB, create iv of size 16
    ok 26 - encode
    ok 27 - decode
    ok 28 - data is correct
    ok 29 - AES128 16 OFB, create iv of size 16
    ok 30 - encode
    ok 31 - decode
    ok 32 - data is correct
    ok 33 - AES192 24 ECB, create iv of size 0
    ok 34 - encode
    ok 35 - decode
    ok 36 - data is correct
    ok 37 - AES192 24 CBC, create iv of size 16
    ok 38 - encode
    ok 39 - decode
    ok 40 - data is correct
    ok 41 - AES192 24 CFB, create iv of size 16
    ok 42 - encode
    ok 43 - decode
    ok 44 - data is correct
    ok 45 - AES192 24 OFB, create iv of size 16
    ok 46 - encode
    ok 47 - decode
    ok 48 - data is correct
    ok 49 - AES256 32 ECB, create iv of size 0
    ok 50 - encode
    ok 51 - decode
    ok 52 - data is correct
    ok 53 - AES256 32 CBC, create iv of size 16
    ok 54 - encode
    ok 55 - decode
    ok 56 - data is correct
    ok 57 - AES256 32 CFB, create iv of size 16
    ok 58 - encode
    ok 59 - decode
    ok 60 - data is correct
    ok 61 - AES256 32 OFB, create iv of size 16
    ok 62 - encode
    ok 63 - decode
    ok 64 - data is correct
    ok 65 - DES 8 ECB, create iv of size 0
    ok 66 - encode
    ok 67 - decode
    ok 68 - data is correct
    ok 69 - DES 8 CBC, create iv of size 8
    ok 70 - encode
    ok 71 - decode
    ok 72 - data is correct
    ok 73 - DES 8 CFB, create iv of size 8
    ok 74 - encode
    ok 75 - decode
    ok 76 - data is correct
    ok 77 - DES 8 OFB, create iv of size 8
    ok 78 - encode
    ok 79 - decode
    ok 80 - data is correct
ok 4 - subtests
	*** test_each: done ***
	*** test_stream ***
    1..11
    ok 1 - stream begin checks key size
    ok 2 - stream begin checks iv size
    ok 3 - begin encryption
    ok 4 - append checks size
    ok 5 - append 5
    ok 6 - append 10
    ok 7 - last append 30
    ok 8 - commit checks size
    ok 9 - commit 16
    ok 10 - decoder returned correct size
    ok 11 - data is decoded correctly
ok 5 - subtests
	*** test_stream: done ***
	*** main: done ***
